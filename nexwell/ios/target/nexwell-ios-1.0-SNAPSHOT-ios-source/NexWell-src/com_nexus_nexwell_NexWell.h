#ifndef __COM_NEXUS_NEXWELL_NEXWELL__
#define __COM_NEXUS_NEXWELL_NEXWELL__

#include "cn1_globals.h"
#include "java_lang_Object.h"
extern struct clazz class__com_nexus_nexwell_NexWell;
extern void __INIT_VTABLE_com_nexus_nexwell_NexWell(CODENAME_ONE_THREAD_STATE, void** vtable);
extern void __STATIC_INITIALIZER_com_nexus_nexwell_NexWell(CODENAME_ONE_THREAD_STATE);
extern void __FINALIZER_com_nexus_nexwell_NexWell(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT objToDelete);
extern void __GC_MARK_com_nexus_nexwell_NexWell(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT objToMark, JAVA_BOOLEAN force);
extern JAVA_OBJECT __NEW_com_nexus_nexwell_NexWell(CODENAME_ONE_THREAD_STATE);
extern JAVA_OBJECT __NEW_INSTANCE_com_nexus_nexwell_NexWell(CODENAME_ONE_THREAD_STATE);

JAVA_VOID com_nexus_nexwell_NexWell___INIT____(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_init___java_lang_Object(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject, JAVA_OBJECT __cn1Arg1);

JAVA_VOID com_nexus_nexwell_NexWell_start__(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_stop__(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_destroy__(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_lambda$init$0___com_codename1_io_NetworkEvent(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT __cn1Arg1);

JAVA_BOOLEAN com_nexus_nexwell_NexWell_equals___java_lang_Object_R_boolean(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject, JAVA_OBJECT __cn1Arg1);

JAVA_OBJECT com_nexus_nexwell_NexWell_getClass___R_java_lang_Class(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_INT com_nexus_nexwell_NexWell_hashCode___R_int(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_notify__(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_notifyAll__(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_OBJECT com_nexus_nexwell_NexWell_toString___R_java_lang_String(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_wait__(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);

JAVA_VOID com_nexus_nexwell_NexWell_wait___long(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject, JAVA_LONG __cn1Arg1);

JAVA_VOID com_nexus_nexwell_NexWell_wait___long_int(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject, JAVA_LONG __cn1Arg1, JAVA_INT __cn1Arg2);

JAVA_OBJECT com_nexus_nexwell_NexWell_clone___R_java_lang_Object(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT  __cn1ThisObject);
#define virtual_com_nexus_nexwell_NexWell_init___java_lang_Object com_nexus_nexwell_NexWell_init___java_lang_Object
#define virtual_com_nexus_nexwell_NexWell_start__ com_nexus_nexwell_NexWell_start__
#define virtual_com_nexus_nexwell_NexWell_stop__ com_nexus_nexwell_NexWell_stop__
#define virtual_com_nexus_nexwell_NexWell_destroy__ com_nexus_nexwell_NexWell_destroy__
JAVA_OBJECT get_field_com_nexus_nexwell_NexWell_current(JAVA_OBJECT t);
void set_field_com_nexus_nexwell_NexWell_current(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT __cn1Val, JAVA_OBJECT __cn1T);
JAVA_OBJECT get_field_com_nexus_nexwell_NexWell_theme(JAVA_OBJECT t);
void set_field_com_nexus_nexwell_NexWell_theme(CODENAME_ONE_THREAD_STATE, JAVA_OBJECT __cn1Val, JAVA_OBJECT __cn1T);


struct obj__com_nexus_nexwell_NexWell {
    DEBUG_GC_VARIABLES
    struct clazz *__codenameOneParentClsReference;
    int __codenameOneReferenceCount;
    void* __codenameOneThreadData;
    int __codenameOneGcMark;
    void* __ownerThread;
    int __heapPosition;
    JAVA_OBJECT com_nexus_nexwell_NexWell_current;
    JAVA_OBJECT com_nexus_nexwell_NexWell_theme;
};



#endif //__COM_NEXUS_NEXWELL_NEXWELL__
